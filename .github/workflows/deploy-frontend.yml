name: Deploy Frontend

on:
  push:
    branches: [main, master]
    paths:
      - 'evently-frontend/**'
  pull_request:
    branches: [main, master]
    paths:
      - 'evently-frontend/**'
  workflow_dispatch:

# Add permissions needed for GitHub API operations
permissions:
  contents: read
  pull-requests: write
  issues: write
  actions: read
  checks: read
  deployments: write
  statuses: write

jobs:
  test:
    name: Test
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: ./evently-frontend
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup pnpm
        uses: pnpm/action-setup@v2
        with:
          version: 8

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'pnpm'
          cache-dependency-path: evently-frontend/pnpm-lock.yaml

      - name: Install dependencies
        run: pnpm install

      - name: Create test environment file
        run: |
          echo "NEXTAUTH_SECRET=${{ secrets.NEXTAUTH_SECRET }}" >> .env.test.local
          echo "GOOGLE_CLIENT_ID=${{ secrets.GOOGLE_CLIENT_ID }}" >> .env.test.local
          echo "GOOGLE_CLIENT_SECRET=${{ secrets.GOOGLE_CLIENT_SECRET }}" >> .env.test.local
          echo "DATABASE_URL=${{ secrets.DATABASE_URL }}" >> .env.test.local
          echo "NEXT_PUBLIC_API_URL=https://evently-backend-amber.vercel.app" >> .env.test.local
          echo "NEXT_PUBLIC_API_BASE_URL=https://evently-backend-amber.vercel.app" >> .env.test.local
          echo "NEXTAUTH_URL=http://localhost:3000" >> .env.test.local

      - name: Run type checking
        run: pnpm exec tsc --noEmit

      - name: Run unit tests
        run: pnpm run test:ci

  deploy:
    name: Deploy
    needs: test
    runs-on: ubuntu-latest
    if: ${{ github.event_name == 'push' || github.event_name == 'workflow_dispatch' }}
    
    steps:
      - name: Checkout
        uses: actions/checkout@v4
      
      - name: Setup pnpm
        uses: pnpm/action-setup@v2
        with:
          version: 8

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'pnpm'
          cache-dependency-path: evently-frontend/pnpm-lock.yaml
      
      - name: Create environment file
        working-directory: ./evently-frontend
        run: |
          echo "Creating .env file..."
          cat > .env << EOF
          NEXT_PUBLIC_API_URL=https://evently-backend-amber.vercel.app
          NEXT_PUBLIC_API_BASE_URL=https://evently-backend-amber.vercel.app
          NEXTAUTH_URL=https://evently-frontend-alpha.vercel.app
          NEXTAUTH_SECRET=${{ secrets.NEXTAUTH_SECRET }}
          GOOGLE_CLIENT_ID=${{ secrets.GOOGLE_CLIENT_ID }}
          GOOGLE_CLIENT_SECRET=${{ secrets.GOOGLE_CLIENT_SECRET }}
          DATABASE_URL=${{ secrets.DATABASE_URL }}
          EOF
          echo "Environment file created successfully"
          echo "‚úÖ Environment variables configured"

      - name: Install dependencies
        working-directory: ./evently-frontend
        run: pnpm install

      - name: Build application
        working-directory: ./evently-frontend
        run: |
          echo "Building Next.js application..."
          pnpm run build
          echo "‚úÖ Build completed successfully"
      
      # Deploy to Vercel using CLI
      - name: Install Vercel CLI
        run: |
          npm install --global vercel@latest
          # Disable telemetry to avoid output noise
          vercel telemetry disable
        
      - name: Deploy Project to Vercel
        id: vercel-deployment
        run: |
          echo "Deploying to Vercel..."
          echo "Branch: ${{ github.ref }}"
          echo "Event: ${{ github.event_name }}"
          
          # Function to extract URL from Vercel output
          extract_url() {
            local output="$1"
            # Extract URL using various patterns
            local url=$(echo "$output" | grep -oE 'https://[a-zA-Z0-9\-]+\.vercel\.app' | head -1)
            if [ -z "$url" ]; then
              # Try alternative pattern
              url=$(echo "$output" | grep -oE 'Preview: https://[a-zA-Z0-9\-]+\.vercel\.app' | sed 's/Preview: //' | head -1)
            fi
            if [ -z "$url" ]; then
              # Try another pattern
              url=$(echo "$output" | grep -oE 'Production: https://[a-zA-Z0-9\-]+\.vercel\.app' | sed 's/Production: //' | head -1)
            fi
            echo "$url"
          }
          
          # Deploy with proper output handling
          set +e  # Don't exit on error immediately
          
          if [ "${{ github.ref }}" = "refs/heads/main" ] || [ "${{ github.ref }}" = "refs/heads/master" ]; then
            echo "Deploying to production..."
            DEPLOYMENT_OUTPUT=$(vercel --prod --token=${{ secrets.VERCEL_TOKEN }} --yes 2>&1)
            EXIT_CODE=$?
          else
            echo "Deploying to preview..."
            DEPLOYMENT_OUTPUT=$(vercel --token=${{ secrets.VERCEL_TOKEN }} --yes 2>&1)
            EXIT_CODE=$?
          fi
          
          echo "Deployment output:"
          echo "$DEPLOYMENT_OUTPUT"
          
          # Extract URL from output
          DEPLOYMENT_URL=$(extract_url "$DEPLOYMENT_OUTPUT")
          
          if [ $EXIT_CODE -eq 0 ] && [ ! -z "$DEPLOYMENT_URL" ]; then
            echo "‚úÖ Deployment successful!"
            echo "preview-url=$DEPLOYMENT_URL" >> $GITHUB_OUTPUT
            echo "deployment-url=$DEPLOYMENT_URL" >> $GITHUB_OUTPUT
            echo "Deployed to: $DEPLOYMENT_URL"
          else
            echo "‚ùå Initial deployment had issues. Exit code: $EXIT_CODE"
            echo "Trying alternative approach..."
            
            # Try with different flags
            if [ "${{ github.ref }}" = "refs/heads/main" ] || [ "${{ github.ref }}" = "refs/heads/master" ]; then
              echo "Retrying production deployment..."
              RETRY_OUTPUT=$(vercel --prod --token=${{ secrets.VERCEL_TOKEN }} --yes --force 2>&1)
            else
              echo "Retrying preview deployment..."
              RETRY_OUTPUT=$(vercel --token=${{ secrets.VERCEL_TOKEN }} --yes --force 2>&1)
            fi
            
            echo "Retry output:"
            echo "$RETRY_OUTPUT"
            
            RETRY_URL=$(extract_url "$RETRY_OUTPUT")
            
            if [ ! -z "$RETRY_URL" ]; then
              echo "‚úÖ Retry deployment successful!"
              echo "preview-url=$RETRY_URL" >> $GITHUB_OUTPUT
              echo "deployment-url=$RETRY_URL" >> $GITHUB_OUTPUT
              echo "Deployed to: $RETRY_URL"
            else
              echo "‚ùå Could not extract deployment URL"
              # Use fallback URL
              FALLBACK_URL="https://evently-frontend-alpha.vercel.app"
              echo "preview-url=$FALLBACK_URL" >> $GITHUB_OUTPUT
              echo "deployment-url=$FALLBACK_URL" >> $GITHUB_OUTPUT
              echo "Using fallback URL: $FALLBACK_URL"
            fi
          fi
          
          set -e  # Re-enable exit on error
        working-directory: ./evently-frontend
        env:
          VERCEL_TOKEN: ${{ secrets.VERCEL_TOKEN }}
          CI: 1
          DISABLE_TELEMETRY: 1
          
      - name: Debug deployment outputs
        run: |
          echo "Preview URL: ${{ steps.vercel-deployment.outputs.preview-url }}"
          echo "Deployment URL: ${{ steps.vercel-deployment.outputs.preview-name }}"
          echo "Event type: ${{ github.event_name }}"
          echo "Ref: ${{ github.ref }}"
          
      - name: Add comment to PR
        if: github.event_name == 'pull_request'
        uses: actions/github-script@v7
        env:
          VERCEL_URL: ${{ steps.vercel-deployment.outputs.preview-url }}
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const { issue: { number: issue_number }, repo: { owner, repo } } = context;
            const deployUrl = process.env.VERCEL_URL;
            
            console.log('Deploy URL:', deployUrl);
            console.log('Issue number:', issue_number);
            console.log('Owner:', owner);
            console.log('Repo:', repo);
            
            if (deployUrl) {
              try {
                await github.rest.issues.createComment({
                  issue_number,
                  owner,
                  repo,
                  body: `üöÄ Deploy Preview berhasil!\n\n‚úÖ Preview URL: ${deployUrl}\n\nüì± Tested on mobile and desktop devices`
                });
                console.log('Comment added successfully');
              } catch (error) {
                console.error('Error adding comment:', error);
                // Don't fail the workflow if comment fails
              }
            } else {
              console.log('No deploy URL available');
            }

      - name: Deployment success notification
        if: success()
        run: |
          echo "üéâ DEPLOYMENT SUCCESS!"
          echo "================================"
          echo "‚úÖ Frontend berhasil di-deploy ke Vercel"
          echo "üåê URL: ${{ steps.vercel-deployment.outputs.preview-url }}"
          echo "üì± Responsiveness: Tested & Optimized"
          echo "üîß Mobile & Desktop: Full Support"
          echo "================================"
          echo ""
          echo "Komponen Responsif yang Tersedia:"
          echo "- ‚úÖ Navbar (Hamburger menu di mobile)"
          echo "- ‚úÖ Event Cards (Responsive layout)"
          echo "- ‚úÖ Event Details (Mobile-optimized)"
          echo "- ‚úÖ Timeline (Hidden di mobile)"
          echo "- ‚úÖ Pagination (3 buttons mobile, 5 desktop)"
          echo ""
          echo "Alternative URLs:"
          echo "- https://evently-frontend-alpha.vercel.app"

      - name: Handle deployment failure
        if: failure()
        run: |
          echo "‚ùå Deployment gagal!"
          echo "Silakan periksa log di atas untuk detail error"
          exit 1
