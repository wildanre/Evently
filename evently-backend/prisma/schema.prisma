generator client {
  provider = "prisma-client-js"
}

// Seed configuration
// This tells Prisma how to run the seed script
// Run with: pnpm db:seed

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

model event_feedback {
  id        String   @id @default(cuid())
  rating    Int
  comment   String?
  eventId   String
  userId    String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  events    events   @relation(fields: [eventId], references: [id], onDelete: Cascade)
  users     users    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([eventId, userId])
}

// Tabel sederhana untuk menangani join event
model myEvents {
  id         String   @id @default(cuid())
  userId     String
  eventId    String
  status     String   @default("joined") // "joined", "pending", "left"
  joinedAt   DateTime @default(now())
  updatedAt  DateTime @updatedAt
  
  // Relations
  user       users    @relation(fields: [userId], references: [id], onDelete: Cascade)
  event      events   @relation(fields: [eventId], references: [id], onDelete: Cascade)

  @@unique([userId, eventId])
  @@map("my_events")
}

// Tabel untuk participants dengan role khusus (speaker, manager, dll)
model event_participants {
  id                                               String    @id @default(cuid())
  role                                             EventRole
  status                                           String    @default("confirmed")
  eventId                                          String
  userId                                           String
  speakerEventId                                   String?
  managerEventId                                   String?
  registeredAt                                     DateTime  @default(now())
  updatedAt                                        DateTime  @updatedAt
  events_event_participants_eventIdToevents        events    @relation("event_participants_eventIdToevents", fields: [eventId], references: [id], onDelete: Cascade)
  events_event_participants_managerEventIdToevents events?   @relation("event_participants_managerEventIdToevents", fields: [managerEventId], references: [id])
  events_event_participants_speakerEventIdToevents events?   @relation("event_participants_speakerEventIdToevents", fields: [speakerEventId], references: [id])
  users                                            users     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([eventId, userId])
}

model events {
  id                                                           String               @id @default(cuid())
  name                                                         String
  description                                                  String?
  location                                                     String?
  mapsLink                                                     String?
  visibility                                                   Boolean              @default(true)
  tags                                                         String[]             @default([])
  imageUrl                                                     String?
  status                                                       EventStatus          @default(PUBLISHED)
  requireApproval                                              Boolean              @default(false)
  capacity                                                     Int?
  attendeeCount                                                Int                  @default(0)
  ticketPrice                                                  Float?               @default(0)
  startDate                                                    DateTime
  endDate                                                      DateTime
  registrationStartDate                                        DateTime             @default(now())
  registrationEndDate                                          DateTime?
  createdAt                                                    DateTime             @default(now())
  updatedAt                                                    DateTime             @updatedAt
  organizerId                                                  String
  feedbackCount                                                Int                  @default(0)
  feedbackAverageRating                                        Float                @default(0.0)
  event_feedback                                               event_feedback[]
  event_participants_event_participants_eventIdToevents        event_participants[] @relation("event_participants_eventIdToevents")
  event_participants_event_participants_managerEventIdToevents event_participants[] @relation("event_participants_managerEventIdToevents")
  event_participants_event_participants_speakerEventIdToevents event_participants[] @relation("event_participants_speakerEventIdToevents")
  users                                                        users                @relation(fields: [organizerId], references: [id])
  notifications                                                notifications[]
  myEvents                                                     myEvents[]
  payments                                                     payments[]
}

model notifications {
  id          String            @id @default(cuid())
  title       String
  message     String
  type        NotificationType
  isRead      Boolean           @default(false)
  userId      String
  eventId     String?
  createdAt   DateTime          @default(now())
  updatedAt   DateTime          @updatedAt
  users       users             @relation(fields: [userId], references: [id], onDelete: Cascade)
  events      events?           @relation(fields: [eventId], references: [id], onDelete: Cascade)

  @@index([userId, isRead])
  @@index([createdAt])
}

model users {
  id                 String               @id @default(cuid())
  name               String
  email              String               @unique
  password           String?
  profileImageUrl    String?
  bio                String?
  createdAt          DateTime             @default(now())
  updatedAt          DateTime             @updatedAt
  event_feedback     event_feedback[]
  event_participants event_participants[]
  events             events[]
  notifications      notifications[]
  myEvents                                                     myEvents[]
  payments                                                     payments[]
}

model payments {
  id                    String    @id @default(cuid())
  eventId               String
  userId                String
  quantity              Int       @default(1)
  amount                Float
  paymentMethod         String    // va, cc, qris, convenience_store
  status                String    @default("pending") // pending, completed, failed, expired
  ipaymuReferenceId     String?   @unique
  ipaymuSessionId       String?
  ipaymuTransactionId   String?
  paymentUrl            String?
  expiryTime            DateTime?
  buyerName             String?
  buyerEmail            String?
  buyerPhone            String?
  createdAt             DateTime  @default(now())
  updatedAt             DateTime  @updatedAt
  
  // Relations
  user                  users     @relation(fields: [userId], references: [id], onDelete: Cascade)
  event                 events    @relation(fields: [eventId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@index([eventId])
  @@index([status])
}

enum EventRole {
  ATTENDEE
  SPEAKER
  ORGANIZER
  MANAGER
}

enum EventStatus {
  DRAFT
  PUBLISHED
  CANCELLED
  COMPLETED
}

enum RegistrationStatus {
  OPEN
  CLOSED
  WAITLIST
}

enum NotificationType {
  EVENT_CREATED
  EVENT_UPDATED
  EVENT_CANCELLED
  EVENT_REMINDER
  REGISTRATION_CONFIRMED
  REGISTRATION_APPROVED
  REGISTRATION_REJECTED
  FEEDBACK_REQUEST
  GENERAL
}
