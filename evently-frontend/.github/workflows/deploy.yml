name: Frontend CI with Vercel Deployment

on:
  push:
    branches: [ main ]
    paths:
      - 'evently-frontend/**'
  pull_request:
    branches: [ main ]
    paths:
      - 'evently-frontend/**'
  workflow_dispatch:

jobs:
  test-and-build:
    name: Run Tests and Build
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: ./evently-frontend
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Setup pnpm
        uses: pnpm/action-setup@v2
        with:
          version: 8
      
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 18
          cache: 'pnpm'
          cache-dependency-path: evently-frontend/pnpm-lock.yaml
      
      - name: Install dependencies
        run: pnpm install
      
      - name: Create test environment file
        run: |
          echo "NEXT_PUBLIC_API_URL=https://evently-backend-amber.vercel.app" >> .env.test.local
          echo "NEXT_PUBLIC_API_BASE_URL=https://evently-backend-amber.vercel.app/api" >> .env.test.local
          echo "NEXTAUTH_SECRET=${{ secrets.NEXTAUTH_SECRET }}" >> .env.test.local
          echo "NEXTAUTH_URL=https://evently-nine-iota.vercel.app" >> .env.test.local
          echo "GOOGLE_CLIENT_ID=${{ secrets.GOOGLE_CLIENT_ID }}" >> .env.test.local
          echo "GOOGLE_CLIENT_SECRET=${{ secrets.GOOGLE_CLIENT_SECRET }}" >> .env.test.local
          echo "DATABASE_URL=${{ secrets.DATABASE_URL }}" >> .env.test.local
      
      - name: Run type checking
        run: pnpm exec tsc --noEmit
      
      - name: Run unit tests
        run: pnpm run test:ci
      
      - name: Run build test
        run: pnpm run build
      
      - name: Upload test results
        uses: actions/upload-artifact@v4
        with:
          name: test-results
          path: |
            evently-frontend/coverage/
            evently-frontend/test-results/

  deploy-production:
    name: Deploy to Production
    runs-on: ubuntu-latest
    needs: test-and-build
    if: github.event_name == 'push' || github.event_name == 'workflow_dispatch'
    environment:
      name: Production
      url: ${{ steps.deployment.outputs.url }}
    defaults:
      run:
        working-directory: ./evently-frontend
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Setup pnpm
        uses: pnpm/action-setup@v2
        with:
          version: 8
      
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 18
          cache: 'pnpm'
          cache-dependency-path: evently-frontend/pnpm-lock.yaml
      
      - name: Install Vercel CLI
        run: npm install --global vercel@latest
      
      - name: Install dependencies
        run: pnpm install
      
      - name: Create .env file
        run: |
          echo "NEXT_PUBLIC_API_URL=https://evently-backend-amber.vercel.app" >> .env
          echo "NEXT_PUBLIC_API_BASE_URL=https://evently-backend-amber.vercel.app/api" >> .env
          echo "NEXTAUTH_SECRET=${{ secrets.NEXTAUTH_SECRET }}" >> .env
          echo "NEXTAUTH_URL=https://evently-nine-iota.vercel.app" >> .env
          echo "GOOGLE_CLIENT_ID=${{ secrets.GOOGLE_CLIENT_ID }}" >> .env
          echo "GOOGLE_CLIENT_SECRET=${{ secrets.GOOGLE_CLIENT_SECRET }}" >> .env
          echo "DATABASE_URL=${{ secrets.DATABASE_URL }}" >> .env
      
      - name: Pull Vercel Environment Information
        run: vercel pull --yes --environment=production --token=${{ secrets.VERCEL_TOKEN }}
      
      - name: Build Project Artifacts
        run: |
          export PATH="/bin:/usr/bin:$PATH"
          vercel build --prod --token=${{ secrets.VERCEL_TOKEN }}
      
      - name: Deploy to Vercel
        id: deployment
        run: |
          export PATH="/bin:/usr/bin:$PATH"
          URL=$(vercel deploy --prebuilt --prod --token=${{ secrets.VERCEL_TOKEN }})
          echo "url=$URL" >> $GITHUB_OUTPUT
      
      - name: Print deployment URL
        run: echo "Deployed to ${{ steps.deployment.outputs.url }}"

  deploy-preview:
    name: Deploy to Preview
    runs-on: ubuntu-latest
    needs: test-and-build
    if: github.event_name == 'pull_request'
    environment:
      name: Preview
      url: ${{ steps.deployment.outputs.url }}
    defaults:
      run:
        working-directory: ./evently-frontend
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Setup pnpm
        uses: pnpm/action-setup@v2
        with:
          version: 8
      
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 18
          cache: 'pnpm'
          cache-dependency-path: evently-frontend/pnpm-lock.yaml
      
      - name: Install Vercel CLI
        run: npm install --global vercel@latest
      
      - name: Install dependencies
        run: pnpm install
      
      - name: Create .env file
        run: |
          echo "NEXT_PUBLIC_API_URL=https://evently-backend-amber.vercel.app" >> .env
          echo "NEXT_PUBLIC_API_BASE_URL=https://evently-backend-amber.vercel.app/api" >> .env
          echo "NEXTAUTH_SECRET=${{ secrets.NEXTAUTH_SECRET }}" >> .env
          echo "NEXTAUTH_URL=https://evently-nine-iota.vercel.app" >> .env
          echo "GOOGLE_CLIENT_ID=${{ secrets.GOOGLE_CLIENT_ID }}" >> .env
          echo "GOOGLE_CLIENT_SECRET=${{ secrets.GOOGLE_CLIENT_SECRET }}" >> .env
          echo "DATABASE_URL=${{ secrets.DATABASE_URL }}" >> .env
      
      - name: Pull Vercel Environment Information
        run: vercel pull --yes --environment=preview --token=${{ secrets.VERCEL_TOKEN }}
      
      - name: Build Project Artifacts
        run: |
          export PATH="/bin:/usr/bin:$PATH"
          vercel build --token=${{ secrets.VERCEL_TOKEN }}
      
      - name: Deploy to Vercel
        id: deployment
        run: |
          export PATH="/bin:/usr/bin:$PATH"
          URL=$(vercel deploy --prebuilt --token=${{ secrets.VERCEL_TOKEN }})
          echo "url=$URL" >> $GITHUB_OUTPUT
          echo "::notice title=Preview Deployment::Preview deployed to $URL"
      
      - name: Comment PR with Deployment URL
        uses: actions/github-script@v7
        if: github.event_name == 'pull_request'
        with:
          script: |
            const url = process.env.DEPLOYMENT_URL;
            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: `ðŸš€ Preview deployed to: ${url}`
            });
        env:
          DEPLOYMENT_URL: ${{ steps.deployment.outputs.url }}
